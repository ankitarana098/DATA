#include <iostream>
using namespace std;
#define INT_MAX 999999

int n=4;
//adj matrix
int dist[10][10]={{0,20,42,25},
                  {20,0,30,34},
                  {42,30,0,10},
                  {25,34,10,0}};
///mask if all cities have been visited
int visited_all =(1<<n)-1;

//pos-->from which city i am going a
                                /// \    a is the pos
                                //b  c
int tsp(int mask,int pos)
{   //base case
    if(mask==visited_all)
    {
        return dist[pos][0];  //if all visited move from current pos to origin
    }
    int ans =INT_MAX;
    //all other cases
    for(int city=0;city<n;city++)
    {
        //here we will check if city is visited or not 
        //by checking the mask value
        //mask-->0 0 1 0
        //  1<<city
           // city travelled 2  so shift 1 by 2 1<<2
        //  mask->        0 1 1 0---0 0 1 0
        //  1 left shift  0 1 0 0---0 1 0 0
        //                0 1 0 0---0 0 0 0
        if((mask&(1<<city))==0)
        {
            int newans=dist[pos][city]+tsp(mask|(1<<city),city);
            ans=min(ans,newans);
        }
        
    }
    return ans;
}
int main() {
	cout<<tsp(1,0)<<endl;
	//mask--> 1 0 0 1 
	//pos--> a-(0)
	return 0;
}
